package com.example.security;

import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;

import com.example.security.Room.AppsDataRoomDB;
import com.google.android.material.floatingactionbutton.FloatingActionButton;


import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import android.util.Log;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Button;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import static android.Manifest.permission.ACCESS_BACKGROUND_LOCATION;
import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
import static android.Manifest.permission.ACCESS_FINE_LOCATION;
import static android.Manifest.permission.ACCESS_MEDIA_LOCATION;
import static android.Manifest.permission.CAMERA;
import static android.Manifest.permission.CAPTURE_AUDIO_OUTPUT;
import static android.Manifest.permission.MODIFY_AUDIO_SETTINGS;
import static android.Manifest.permission.MOUNT_FORMAT_FILESYSTEMS;
import static android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS;
import static android.Manifest.permission.READ_CONTACTS;
import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.Manifest.permission.READ_SMS;
import static android.Manifest.permission.RECEIVE_MMS;
import static android.Manifest.permission.RECEIVE_SMS;
import static android.Manifest.permission.RECEIVE_WAP_PUSH;
import static android.Manifest.permission.RECORD_AUDIO;
import static android.Manifest.permission.SEND_SMS;
import static android.Manifest.permission.SMS_FINANCIAL_TRANSACTIONS;
import static android.Manifest.permission.WRITE_CONTACTS;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
import static android.content.pm.PackageInfo.REQUESTED_PERMISSION_GRANTED;

public class MainActivity extends AppCompatActivity {

    String version;
    FloatingActionButton fab;
    Button phishingButton;
    private AppsDataRoomDB appsDataRoomDB;
    private List<AppdataTemplate> toBeJasoned;
    private AppdataTemplate appdataTemplate;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);


        appsDataRoomDB = AppsDataRoomDB.getDatabase(getApplicationContext());

    }

    private String getIPAddress() {
        try {
            List<NetworkInterface> all = Collections.list(NetworkInterface.getNetworkInterfaces());
            for(NetworkInterface nif : all){
                List<InetAddress> iAddresses = Collections.list(nif.getInetAddresses());
                for(InetAddress ia : iAddresses){
                    if(!ia.isLoopbackAddress()){
                        String ipaddress = ia.getHostAddress();
                        Log.d("Test:","-----------------------------------------#################: "+ia.hashCode());
                        return ipaddress;

                    }

                }
            }
        } catch (SocketException e) {
            e.printStackTrace();
        }

        return "";
    }

    @Override
    protected void onStart() {
        super.onStart();
    }

    @Override
    protected void onResume() {
        super.onResume();
        Log.e("Msg: ","-------------------------------############################  OnResume()");
        fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                Log.e("Android Version", Build.VERSION.RELEASE);
                String macAd = getMacAddr();
                Log.e("MAC Address:",macAd);
                Log.e("IP Address: ", getIPAddress());

                PackageManager pm = getPackageManager();
                List<ApplicationInfo> installedApplication = pm.getInstalledApplications(PackageManager.GET_META_DATA);
                for(ApplicationInfo packageInfo : installedApplication){
                    toBeJasoned = new ArrayList<>();

                    if(packageInfo.packageName.startsWith("com.google.") || (packageInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 1){
                        appdataTemplate = new AppdataTemplate();
                        try {
                            version = pm.getPackageInfo(packageInfo.packageName, 0).versionName;
                        } catch (PackageManager.NameNotFoundException e) {
                            e.printStackTrace();
                        }

                        Log.e("PackageName", packageInfo.packageName);
                        Log.e("Version", version);
                        Log.e("Source directory", packageInfo.sourceDir);
                        Log.e("Application Name", pm.getApplicationLabel(packageInfo).toString());
                        Log.e("Intent", String.valueOf(pm.getLaunchIntentForPackage(packageInfo.packageName)));

                        appdataTemplate.setAgeId("1");
                        appdataTemplate.setDistrictId("1");
                        appdataTemplate.setAndroidVersion(Build.VERSION.RELEASE);
                        appdataTemplate.setMac(macAd);
                        appdataTemplate.setApkVersion(version);
                        appdataTemplate.setApplicationName(pm.getApplicationLabel(packageInfo).toString());
                        appdataTemplate.setPackageName(packageInfo.packageName);

                        try {
                            PackageInfo infoOfPackage = pm.getPackageInfo(packageInfo.packageName, PackageManager.GET_PERMISSIONS);
                            String[] requestedPermission = infoOfPackage.requestedPermissions;
                            int[] requestedPermissionGranted = infoOfPackage.requestedPermissionsFlags;
                            if(requestedPermissionGranted != null){
                                for(int i=0; i<requestedPermissionGranted.length; i++){
                                    if(requestedPermissionGranted[i] == REQUESTED_PERMISSION_GRANTED){
                                        if(requestedPermission[i] == CAMERA ){
                                            appdataTemplate.setCameraPermission(true);
                                        }if(requestedPermission[i] == ACCESS_BACKGROUND_LOCATION || requestedPermission[i] == ACCESS_COARSE_LOCATION ||
                                        requestedPermission[i] == ACCESS_FINE_LOCATION || requestedPermission[i] == ACCESS_MEDIA_LOCATION){
                                            appdataTemplate.setLocationPermission(true);
                                        }if(requestedPermission[i] == RECORD_AUDIO || requestedPermission[i] == MODIFY_AUDIO_SETTINGS ||
                                                requestedPermission[i] == CAPTURE_AUDIO_OUTPUT){
                                            appdataTemplate.setMicroPhonePermission(true);
                                        }if(requestedPermission[i] == READ_CONTACTS || requestedPermission[i] == WRITE_CONTACTS){
                                            appdataTemplate.setContactPermission(true);
                                        }if(requestedPermission[i] == READ_SMS || requestedPermission[i] == RECEIVE_SMS
                                        || requestedPermission[i] == SEND_SMS || requestedPermission[i] == SMS_FINANCIAL_TRANSACTIONS ||
                                        requestedPermission[i]==RECEIVE_MMS || requestedPermission[i]== RECEIVE_WAP_PUSH){
                                            appdataTemplate.setSmsPermission(true);
                                        }if(requestedPermission[i] == MOUNT_FORMAT_FILESYSTEMS || requestedPermission[i]==
                                        MOUNT_UNMOUNT_FILESYSTEMS || requestedPermission[i]==READ_EXTERNAL_STORAGE || requestedPermission[i]
                                        == WRITE_EXTERNAL_STORAGE){
                                            appdataTemplate.setMemoryPermission(true);
                                        }
                                    }

                                   // Log.e(requestedPermission[i], ""+requestedPermissionGranted[i]);
                                }
                            }

                        } catch (PackageManager.NameNotFoundException e) {
                            e.printStackTrace();
                        }


                        Log.d( " ","###################################");

                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ssz");
                        sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
                        Log.e("TIMESTAMPS", sdf.format(new Date()));
                        appdataTemplate.setTimeStamps(sdf.format(new Date()));
                        toBeJasoned.add(appdataTemplate);
                    }



                }

            }
        });

        phishingButton = findViewById(R.id.buttonPhishing);
        phishingButton.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {

                Intent intent = new Intent(getApplicationContext(), PhishingActivity.class);
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                startActivity(intent);
            }
        });

        /*Intent intentForAlarm = new Intent();
        PendingIntent pendingIntentForAlarm = PendingIntent.getBroadcast(getApplicationContext(), 0, intentForAlarm, 0);
        AlarmManager alarmManager = (AlarmManager) getApplicationContext().getSystemService(Context.ALARM_SERVICE);
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT){
            alarmManager.setExact(AlarmManager.RTC_WAKEUP, 60*1000, pendingIntentForAlarm);
        }
        alarmManager.set(AlarmManager.RTC_WAKEUP, 60*1000, pendingIntentForAlarm);
        Log.e("MainActivity","_------------------------------------################## Alarm Manager set");*/
    }

    @Override
    protected void onPause()
    {
        super.onPause();
        Log.e("Msg: ","-------------------------------############################  OnPause()");
    }

    public static String getMacAddr() {
        try {
            List<NetworkInterface> all = Collections.list(NetworkInterface.getNetworkInterfaces());
            for (NetworkInterface nif : all) {
                if (!nif.getName().equalsIgnoreCase("wlan0")) continue;

                byte[] macBytes = nif.getHardwareAddress();
                if (macBytes == null) {
                    return "";
                }

                StringBuilder res1 = new StringBuilder();
                for (byte b : macBytes) {
                    res1.append(String.format("%02X:",b));
                }

                if (res1.length() > 0) {
                    res1.deleteCharAt(res1.length() - 1);
                }
                return res1.toString();
            }
        } catch (Exception ex) {
        }
        return "02:00:00:00:00:00";
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }
}
