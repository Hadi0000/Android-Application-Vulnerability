package com.example.security.dataSending;

import android.app.ProgressDialog;
import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.PopupWindow;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.example.security.AppdataTemplate;
import com.example.security.MainActivity;
import com.example.security.R;
import com.example.security.Utility;

import org.json.JSONException;
import org.json.JSONObject;


import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class NetworkWorker {

    List<AppdataTemplate> toBeJsoned;
    ProgressDialog progressDialog;
    Context context;
    int nthJson=0;
    int partition,temp=0;
    LayoutInflater layoutInflater;
    PopupWindow popupWindow;
    TextView popupTextView;
    View layout;
    ScrollView scrollView;


    public NetworkWorker(List<AppdataTemplate> toBeJsoned, Context context){
        this.toBeJsoned = toBeJsoned;
        this.context = context;
        partition = toBeJsoned.size()/10;
        progressDialog = new ProgressDialog(context);
        layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        layout = layoutInflater.inflate(R.layout.popup_window, null);
        layout.setClipToOutline(true);
        scrollView = layout.findViewById(R.id.popupScrollView);

        popupTextView = layout.findViewById(R.id.popupTextview);


        popupWindow = new PopupWindow(layout, 600, 1000,false);
        //popupWindow.setAnimationStyle(R.style.Animation);
//        scrollView.fullScroll(View.FOCUS_DOWN);
//        popupTextView.setMovementMethod(new ScrollingMovementMethod());
        popupWindow.showAtLocation(layout, Gravity.CENTER, 0, 0);

        showDataPopup();
    }

    private void showDataPopup() {



        ScheduledExecutorService exec = Executors.newScheduledThreadPool(1);


        AtomicInteger i = new AtomicInteger(0);
        exec.scheduleAtFixedRate(() -> {
            int j = i.getAndAdd(1);
            if (j >= toBeJsoned.size()) {
                exec.shutdownNow();
                return;
            }


            System.out.println(j);
            Handler handler = new Handler(Looper.getMainLooper());

            final Runnable r = new Runnable() {
                int i=-1;
                public void run() {
                    i++;

                    popupTextView.append("--->"+toBeJsoned.get(j).getMac()+"\n");
                    popupTextView.append("--->"+toBeJsoned.get(j).getApplicationName()+"\n");
                    popupTextView.append("--->"+toBeJsoned.get(j).getPackageName()+"\n");
                    popupTextView.append("--->"+toBeJsoned.get(j).getApkVersion()+"\n");

                    popupTextView.append("--->"+toBeJsoned.get(j).getTimeStamps()+"\n");
                    popupTextView.append("--->"+"Camera access: "+toBeJsoned.get(j).isCameraPermission()+"\n");
                    popupTextView.append("--->"+"Contacts: "+toBeJsoned.get(j).isContactPermission()+"\n");
                    popupTextView.append("--->"+"Memory: "+toBeJsoned.get(j).isMemoryPermission()+"\n");
                    popupTextView.append("--->"+"SMS: "+toBeJsoned.get(j).isSmsPermission()+"\n");
                    popupTextView.append("--->"+"Microphone: "+toBeJsoned.get(j).isMicroPhonePermission()+"\n");
                    popupTextView.append("--->"+"GPS: "+toBeJsoned.get(j).isLocationPermission()+"\n");

                    popupTextView.append("++++++++++++++++++++++++++++++++"+"\n");

                    scrollView.post(new Runnable() {
                        @Override
                        public void run() {
                            scrollView.smoothScrollTo(0, popupTextView.getBottom());
                        }
                    });
                    if(j >= (toBeJsoned.size()-1)){
                        popupTextView.append("SENDING ....");
                        sendData();
                    }
                }
            };

            handler.postDelayed(r, 0);

        }, 0, 1, TimeUnit.SECONDS);


        //popupTextView.append("SENDING ....");

        Log.e("NetworkeWorker","End of showpopup");
        //sendData();

    }

    public void sendData(){
        /*if(!progressDialog.isShowing()){
            progressDialog.setMessage("Sending");
            progressDialog.show();
        }*/
        //popupWindow.showAtLocation(popupView, Gravity.CENTER, 0, 0);
        if(temp == partition){
            popupTextView.append("# ");
            temp = 0;

        }

        String url = "http://172.116.20.189:8080/api/feed";

        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("ageId",toBeJsoned.get(nthJson).getAgeId());
            jsonObject.put("districtId", toBeJsoned.get(nthJson).getDistrictId());
            jsonObject.put("applicationName", toBeJsoned.get(nthJson).getApplicationName());
            jsonObject.put("packageName", toBeJsoned.get(nthJson).getPackageName());
            jsonObject.put("apkVersion", toBeJsoned.get(nthJson).getApkVersion());
            jsonObject.put("mac", toBeJsoned.get(nthJson).getMac());
            jsonObject.put("name", toBeJsoned.get(nthJson).getDeviceName());
            jsonObject.put("androidVersion", toBeJsoned.get(nthJson).getAndroidVersion());
            jsonObject.put("camera",toBeJsoned.get(nthJson).isCameraPermission());
            jsonObject.put("microphone", toBeJsoned.get(nthJson).isMicroPhonePermission());
            jsonObject.put("gps", toBeJsoned.get(nthJson).isLocationPermission());
            jsonObject.put("contact", toBeJsoned.get(nthJson).isContactPermission());
            jsonObject.put("sms", toBeJsoned.get(nthJson).isSmsPermission());
            jsonObject.put("memory", toBeJsoned.get(nthJson).isMemoryPermission());
            jsonObject.put("timestamps", toBeJsoned.get(nthJson).getTimeStamps());
        } catch (JSONException e) {
            e.printStackTrace();
        }

        Log.e("NetworkWorker","Init data sending");
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.POST, url, jsonObject, new Listener<JSONObject>() {

                    @Override
                    public void onResponse(JSONObject response) {
                        nthJson++;
                        temp++;
                        Toast.makeText(context, " "+nthJson, Toast.LENGTH_SHORT).show();
                        Log.e("NetworkWorker","Found a response");
                       // progressDialog.cancel();

                        if(nthJson<toBeJsoned.size()){
                            Toast.makeText(context, "Calling again", Toast.LENGTH_SHORT).show();
                            sendData();

                        }else{
                            popupTextView.append("\n");
                            popupTextView.append("Completed");
                            popupWindow.dismiss();
                            Utility.getInstance().setDataValue(toBeJsoned);
                        }

                    }
                }, new Response.ErrorListener() {

                    @Override
                    public void onErrorResponse(VolleyError error) {
                        // TODO: Handle error
                        nthJson=0;
                        error.printStackTrace();
                        Toast.makeText(context, "error response", Toast.LENGTH_SHORT).show();
                        Log.e("NetworkWorker","Error response");

                        popupTextView.append("\n");
                        popupTextView.append("Server error. Could not send.");
                        popupWindow.dismiss();

                    }
                });




        Log.e("NetworkWorker","End of data sending");
        //jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(30000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        SingletonRequestqueue.getInstance(context).addToRequestQueue(jsonObjectRequest);
    }
}
