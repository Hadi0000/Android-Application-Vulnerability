package com.example.security.dataSending;

import android.app.ProgressDialog;
import android.content.Context;
import android.util.Log;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.example.security.AppdataTemplate;

import org.json.JSONException;
import org.json.JSONObject;


import java.util.List;

public class NetworkWorker {

    List<AppdataTemplate> toBeJsoned;
    ProgressDialog progressDialog;
    Context context;
    int i=0;
    public NetworkWorker(List<AppdataTemplate> toBeJsoned, Context context){
        this.toBeJsoned = toBeJsoned;
        this.context = context;
        progressDialog = new ProgressDialog(context);

    }

    public void sendData(){
        progressDialog.setMessage("Sending");
        progressDialog.show();
        String url = "http://192.168.0.106:8080/api/feed";

        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("ageId",toBeJsoned.get(i).getAgeId());
            jsonObject.put("districtId", toBeJsoned.get(i).getDistrictId());
            jsonObject.put("applicationName", toBeJsoned.get(i).getApplicationName());
            jsonObject.put("packageName", toBeJsoned.get(i).getPackageName());
            jsonObject.put("apkVersion", toBeJsoned.get(i).getApkVersion());
            jsonObject.put("mac", toBeJsoned.get(i).getMac());
            jsonObject.put("androidVersion", toBeJsoned.get(i).getAndroidVersion());
            jsonObject.put("camera",toBeJsoned.get(i).isCameraPermission());
            jsonObject.put("microphone", toBeJsoned.get(i).isMicroPhonePermission());
            jsonObject.put("gps", toBeJsoned.get(i).isLocationPermission());
            jsonObject.put("contact", toBeJsoned.get(i).isContactPermission());
            jsonObject.put("sms", toBeJsoned.get(i).isSmsPermission());
            jsonObject.put("memory", toBeJsoned.get(i).isMemoryPermission());
            jsonObject.put("timestamps", toBeJsoned.get(i).getTimeStamps());
        } catch (JSONException e) {
            e.printStackTrace();
        }

        Log.e("NetworkWorker","Init data sending");
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.POST, url, jsonObject, new Listener<JSONObject>() {

                    @Override
                    public void onResponse(JSONObject response) {
                        i++;
                        Toast.makeText(context, " "+i, Toast.LENGTH_SHORT).show();
                        Log.e("NetworkWorker","Found a response");
                        progressDialog.cancel();

                        if(i<toBeJsoned.size()){
                            Toast.makeText(context, "Calling again", Toast.LENGTH_SHORT).show();
                            sendData();

                        }

                    }
                }, new Response.ErrorListener() {

                    @Override
                    public void onErrorResponse(VolleyError error) {
                        // TODO: Handle error
                        i=0;
                        error.printStackTrace();
                        Toast.makeText(context, "Error response", Toast.LENGTH_SHORT).show();
                        Log.e("NetworkWorker","Error response");
                        progressDialog.cancel();
                        return;
                    }
                });




        Log.e("NetworkWorker","End of data sending");
        //jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(30000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        SingletonRequestqueue.getInstance(context).addToRequestQueue(jsonObjectRequest);
    }
}
